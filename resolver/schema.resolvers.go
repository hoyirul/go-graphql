package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"

	"github.com/hoyirul/go-graphql/graph"
)

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, name string, price float64) (*graph.Product, error) {
	product, err := r.Resolver.Mutation_createProduct(ctx, name, price)
	if err != nil {
		return nil, err
	}

	return &graph.Product{
		ID:    product.ID,
		Name:  product.Name,
		Price: product.Price,
	}, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*graph.Product, error) {
	products, err := r.Resolver.Query_products(ctx)
	if err != nil {
		return nil, err
	}

	var result []*graph.Product
	for _, p := range products {
		result = append(result, &graph.Product{
			ID:    p.ID,
			Name:  p.Name,
			Price: p.Price,
		})
	}
	return result, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
